s
s
s
s
s
s
s
p *(exp_queue[3]->first)
p exp_queue[3]
s
s
p exp_queue[3]
p *(exp_queue[3]->first)
p (exp_queue[3]->last)->next_in_queue
p *((exp_queue[3]->last)->next_in_queue)
src-prof
s
p exp_queue[3]
p (exp_queue[3]->first)->next_in_queue
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
p act_queue[3]
s
s
s
s
s
s
s
s
s
s
act_queue[prior].first
p act_queue[prior].first
p *(act_queue[prior].first)
s
*curr_process
p *curr_process
s
p *curr_process
s
s
s
s
s
stepi
asm-prof
stepi
src-prof
s
s
s
n
n
s
finish
n
finish
*curr_process
p *curr_process
s
s
s
s
s
s
s
s
srs-prof
src-prof
b testProcess
c
quit
src-prof
b testProcess
c
src-prof
b testProcess
c
n
n
n
src-prof
b testProcess
c
n
n
n
b addTimer
c
c
b wait
info b
c
6295204
b loopMain
c
b createProcess
info b
disable 1.2
c
c
c
q
b keyboard.c:83
c
b process.c:52
b process.c:52
b testMM
b main_test_mm
c
s
s
n
s
n
n
finish
p *curr_process
s
n
s
n
s
s
p *curr_process
s
stepi
s
n
s
p *curr_process
s
stepi
asm-prof
stepi
b process.c:52
b main_test_mm
c
p *curr_process
s
s
n
s
n
s
n
s
p *curr_process
s
stepi
asm-prof
stepi
src-prof
s
s
s
s
s
n
p mm_rqs[rq].size
n
p mm_rqs[rq].address
s
finish
s
s
s
n
s
n
s
s
p *curr_process
s
stepi
asm-prof
stepi
b process.c:52
c
p *curr_process
s
s
s
p processes[i]
p processes[0]
s
s
s
s
s
s
s
s
s
s
s
s
s
s
stepi
n
n
s
s
p *curr_process
stepi
asm-prof
stepi
stepi
src-prof
s
s
s
s
n
n
n
p mm_rqs[rq].size
s
n
n
n
n
n
n
p processes[i]
p *curr_process
b test_mm
c
s
n
p mm_rqs[rq].size
n
p mm_rqs[rq].address
b process.c:52
c
p *curr_process
